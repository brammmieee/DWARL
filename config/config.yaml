training:
  steps: 10000000             # number of training steps
  paralell_environments: 6    # number of parallel environments (and Webots instances)
  
  continue_training: false    # continue training from a previous model
  init_model_datetime: null   # datetime of the model to continue training from 
  init_model_steps: null      # steps of the model to continue training from

  log_interval: 10            # logging interval for logging callback parsed to model [steps]

  callbacks:
    model_eval_freq: 10000      # model evaluation frequency [steps]
    model_n_eval_episodes: 25   # number of episodes for model evaluation [episodes]
    model_save_freq: 10000      # model saving frequency [steps]

  model:
    policy_type: MlpPolicy            # policy type for the neural network
    activation_function: ReLU         # activation function for the neural network
    net_arch:                         # network architecture for the neural network
      pi: [256, 256, 256, 256, 256]     # policy network architecture
      vf: [256, 256, 256, 256, 256]     # value function network architecture
  
environment:
  wrappers:                             # wrappers for the environment (order matters)
    ParameterizedRewardWrapper:           # wrapper for parameterized reward wrapper
      plot_wrapped_observation: false     # plot wrapped observation
      reward_buffer_size: 150             # buffer size for reward plotting
      r_at_goal: 250.0                    # reward for reaching the goal
      r_collision: -1500.0                # penalty for collision
      r_not_arrived: 0.0                  # reward for not arriving at the goal
      r_outside_map: -50.0                # penalty for going outside the map
      c_linear_d_progress: 50.0           # reward coefficient for linear progress
      c_path_d_dist: 0.0                  # reward coefficient for path distance
      c_path_d_heading: 0.0               # reward coefficient for path heading
      c_path_d_progress: 0.0              # reward coefficient for path progress
      c_path_d_progress_scaled_dist: 0.0  # reward coefficient for scaled path progress distance
      c_path_dist: 0.0                    # reward coefficient for path distance
      c_path_heading: 0.0                 # reward coefficient for path heading
      d_progress_high_pass_x: 0.01        # high pass filter threshold for progress
      d_progress_low_pass_x: 0.0          # low pass filter threshold for progress
      enable_d_progress_mapping: true     # enable mapping of d_progress to bias towards positive progress
      max_path_dist: 0.075                # max path distance [m], where r_path_dist ranges from pos to neg (max at 0 and ±0.4)
      max_path_heading: 0.18              # max path heading [rad], where r_path_heading ranges from pos to neg (max at 0 and ±0.4)
    SparseLidarObservationWrapper:        # wrapper for sparse lidar observation wrapper
      goal_pos_angle_max: 3.141592653589793  # maximum angle to the goal position [rad]
      goal_pos_angle_min: -3.141592653589793 # minimum angle to the goal position [rad]
      goal_pos_dist_max: 3                   # maximum distance to the goal position [m]
      goal_pos_dist_min: 0.05                # minimum distance to the goal position [m]
    CommandVelocityActionWrapper: {}         # wrapper for command velocity actions
    TimeLimit:                            # wrapper for time limit
      max_episode_time: 30                   # maximum episode time [s]

  start_and_goal:
    goal_tolerance: 0.1               # Tolerance for goal reaching [m]
    min_init2goal_dist: 0.1           # Minimum euclidian distance between initial and goal position [m]
    nominal_distance: 1.5             # Nominal distance between initial and goal position [m]
    init_and_goal_pose_mode: random   # full_path, random (nominal distance apart), random_distance (min. min_init2goal_dist apart)

  webots:                 # Webots simulation parameters
    sample_time: 0.05       # sample time [s]
    mode: fast              # simulation mode (fast or real-time)
    no_rendering: true      # rendering mode (true or false)

  proto_reconfiguration:    # reconfiguration of the Webots proto files
    template_name: RpLidarA2_template.proto  # name of the proto template file (input)
    output_name: RpLidarA2.proto  # name of the output proto file (output)
    proto_substitutions:          # substitutions for the proto template
      defaultFrequency: 20          # default frequency of the lidar [Hz]
      fieldOfView: 6.283185307      # field of view of the lidar [rad]
      horizontalResolution: 64      # horizontal resolution of the lidar [steps]
      maxFrequency: 40              # maximum frequency of the lidar [Hz]
      maxRange: 3.0                 # maximum range of the lidar [m]
      minFrequency: 20              # minimum frequency of the lidar [Hz]
      minRange: 0.05                # minimum range of the lidar [m]
      near: 0.05                    # near clipping distance of the lidar [m]
      noise: 0.0                    # noise level of the lidar measurements
      numberOfLayers: 1             # number of layers of the lidar
      resolution: 0.05              # resolution of the lidar [m]
      type: fixed                   # type of the lidar (fixed or rotating)

  map:
    padding: 0.2      # padding around the map [m] (used to determine whether the robot is outside the map)
    resolution: 0.1   # resolution of the map [m/pxl] (used in converting map from pgm image to Webots proto file)
    width: 30         # width of the map [pxl] (used for positioning the robot in the map)
  
  vehicle_kinematics:
    v_max: 0.2        # maximum linear velocity [m/s]
    v_min: -0.2       # minimum linear velocity [m/s]
    a_max: 0.3        # maximum linear acceleration [m/s^2]
    a_min: -0.3       # minimum linear acceleration [m/s^2]
    omega_max: 0.6    # maximum angular velocity [rad/s]
    omega_min: -0.6   # minimum angular velocity [rad/s]
    alpha_max: 0.8    # maximum angular acceleration [rad/s^2]
    alpha_min: -0.8   # minimum angular acceleration [rad/s^2]

  vehicle_dimensions: 
    polygon_coordinates:  # robot footprint polygon coordinates
      - [0.16, 0.08]
      - [0.16, -0.24]
      - [0.0, -0.4]
      - [-0.16, -0.24]
      - [-0.16, 0.08]
    lidar_y_pos: -0.07075 # y position of the lidar [m]
    z_pos: 0.05           # z position of the robot [m] (used for kinematic robot movement)






